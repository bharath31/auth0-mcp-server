#!/usr/bin/env node

/**
 * Auth0 CLI Path Setup Utility
 * 
 * This script automatically detects the Auth0 CLI path and sets up
 * the necessary environment for the Auth0 MCP server.
 */

import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';

// Get current directory
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const ROOT_DIR = path.resolve(__dirname, '..');
const HOME_DIR = os.homedir();

// Colors for output
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  cyan: '\x1b[36m',
  gray: '\x1b[90m',
  bold: '\x1b[1m'
};

function log(message, type = 'info') {
  const prefix = {
    info: `${colors.cyan}[INFO]${colors.reset}`,
    success: `${colors.green}[SUCCESS]${colors.reset}`,
    warning: `${colors.yellow}[WARNING]${colors.reset}`,
    error: `${colors.red}[ERROR]${colors.reset}`,
  };
  
  console.log(`${prefix[type] || prefix.info} ${message}`);
}

// Find Auth0 CLI path
function findAuth0CliPath() {
  log('Looking for Auth0 CLI...');
  
  // First check if it's set in the environment
  if (process.env.AUTH0_CLI_PATH && fs.existsSync(process.env.AUTH0_CLI_PATH)) {
    log(`Found Auth0 CLI in environment variable: ${process.env.AUTH0_CLI_PATH}`, 'success');
    return process.env.AUTH0_CLI_PATH;
  }
  
  // Look for local CLI in parent directory (cloned from mcp-server branch)
  const possibleLocalPaths = [
    path.resolve(ROOT_DIR, '..', 'auth0-cli', 'auth0'),
    path.resolve(process.cwd(), '..', 'auth0-cli', 'auth0')
  ];
  
  for (const localPath of possibleLocalPaths) {
    if (fs.existsSync(localPath)) {
      log(`Found local Auth0 CLI: ${localPath}`, 'success');
      return localPath;
    }
  }
  
  // Look for CLI in PATH
  try {
    const pathResult = execSync('which auth0', { encoding: 'utf8' }).trim();
    if (pathResult && fs.existsSync(pathResult)) {
      log(`Found Auth0 CLI in PATH: ${pathResult}`, 'success');
      return pathResult;
    }
  } catch (error) {
    log('Auth0 CLI not found in PATH', 'warning');
  }
  
  // Check common installation locations
  const commonLocations = [
    path.join(HOME_DIR, '.local', 'bin', 'auth0'),
    path.join(HOME_DIR, 'bin', 'auth0'),
    '/usr/local/bin/auth0'
  ];
  
  for (const location of commonLocations) {
    if (fs.existsSync(location)) {
      log(`Found Auth0 CLI in common location: ${location}`, 'success');
      return location;
    }
  }
  
  log('Auth0 CLI not found. You need to clone and build it from the mcp-server branch.', 'error');
  log('Run: git clone -b mcp-server https://github.com/auth0/auth0-cli.git && cd auth0-cli && make build', 'info');
  return null;
}

// Check if CLI is from mcp-server branch
function checkCliVersion(cliPath) {
  if (!cliPath) return false;
  
  try {
    // Make the CLI executable
    fs.chmodSync(cliPath, '755');
    
    // Check for MCP command
    const helpOutput = execSync(`${cliPath} help`, { encoding: 'utf8' });
    if (helpOutput.includes('mcp') || helpOutput.includes('MCP')) {
      log('Auth0 CLI has MCP support', 'success');
      return true;
    } else {
      log('Auth0 CLI does not have MCP support. You need the mcp-server branch.', 'error');
      return false;
    }
  } catch (error) {
    log(`Error checking CLI version: ${error.message}`, 'error');
    return false;
  }
}

// Verify Auth0 login status
function checkCliLogin(cliPath) {
  if (!cliPath) return false;
  
  try {
    // Check login status
    const tenantInfo = execSync(`${cliPath} tenants list`, { encoding: 'utf8', stdio: 'pipe' });
    if (tenantInfo && !tenantInfo.includes('Error')) {
      log('Auth0 CLI is logged in', 'success');
      return true;
    }
  } catch (error) {
    log('Auth0 CLI is not logged in', 'warning');
    log(`Please run: ${cliPath} login`, 'info');
    return false;
  }
  
  return false;
}

// Setup environment variables
function setupEnvironment(cliPath) {
  if (!cliPath) return false;
  
  log('Setting up environment...');
  
  // Create or update .env file
  const envPath = path.join(ROOT_DIR, '.env');
  const envContent = `# Auth0 MCP Server Environment
# Generated by setup-cli-path.js

# Auth0 CLI path
AUTH0_CLI_PATH=${cliPath}

# MCP Server mode (set to true for debug mode)
# AUTH0_MCP_DEBUG=true
`;

  try {
    fs.writeFileSync(envPath, envContent);
    log(`Environment file created at: ${envPath}`, 'success');
    
    // Display bash export commands for immediate use
    log('\nRun these commands to set up your environment for the current session:', 'info');
    log(`${colors.gray}export AUTH0_CLI_PATH="${cliPath}"${colors.reset}`);
    log(`${colors.gray}# For debug mode (optional)${colors.reset}`);
    log(`${colors.gray}# export AUTH0_MCP_DEBUG=true${colors.reset}`);
    
    return true;
  } catch (error) {
    log(`Error creating environment file: ${error.message}`, 'error');
    return false;
  }
}

// Main function
async function main() {
  log(`${colors.bold}Auth0 CLI Path Setup Utility${colors.reset}\n`);
  
  // Find Auth0 CLI
  const cliPath = findAuth0CliPath();
  if (!cliPath) {
    return false;
  }
  
  // Check if it's the right version
  const hasCorrectVersion = checkCliVersion(cliPath);
  if (!hasCorrectVersion) {
    return false;
  }
  
  // Check login status
  const isLoggedIn = checkCliLogin(cliPath);
  
  // Set up environment
  const envSetup = setupEnvironment(cliPath);
  
  if (envSetup) {
    log('\nNext steps:', 'info');
    
    if (!isLoggedIn) {
      log(`1. Login to Auth0: ${cliPath} login`, 'info');
      log('2. Build the MCP server: npm run build', 'info');
      log(`3. Configure Claude Desktop: ${cliPath} mcp init`, 'info');
    } else {
      log('1. Build the MCP server: npm run build', 'info');
      log(`2. Configure Claude Desktop: ${cliPath} mcp init`, 'info');
      log('   (This will automatically configure Claude to use the server)', 'info');
    }
    
    return true;
  }
  
  return false;
}

// Run the script
main().then(success => {
  if (success) {
    log('\nSetup completed successfully!', 'success');
  } else {
    log('\nSetup encountered issues. Please check the errors above.', 'warning');
  }
}); 